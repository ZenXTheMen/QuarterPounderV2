-- CAMLOCK SETTINGS

getgenv().Prediction = 0
getgenv().AimPart = "UpperTorso"	
getgenv().Key = "Q"	
getgenv().Smoothness = true
getgenv().SmoothnessAmount = 15
getgenv().PredictMovement = true

-- SILENT AIM SETTINGS

getgenv().SilentAim = true
getgenv().SilentAimShowFOV = false
getgenv().SilentVisibleCheck = true
getgenv().SilentAimPart = "UpperTorso"
getgenv().SilentAimFOVSize = 16
getgenv().SilentHitChance = 110 -- Anything Under "80" Is Legit, Anything Over "100" Is Not Legit.
getgenv().SilentPrediction = 0.13237 -- Depends On Ping.




_, ZeusLOCK = '👍 All The Lock Stuff Below 👍'





















































































































































function Module()
    -- // Vars
local taskwait = task.wait or wait
local taskspawn = task.spawn or function(f, ...)
    return coroutine.resume(coroutine.create(f), ...)
end

-- // Signal Class
local Signal = {}
Signal.__index = Signal
Signal.__type = "Signal"
Signal.ClassName = "Signal"

-- // Connection Class
local Connection = {}
Connection.__index = Connection
Connection.__type = "Connection"
Connection.ClassName = "Connection"

-- // Connection Constructor
function Connection.new(Signal: table, Callback: any): table
    -- // Check Signal
    local typeofSignal = typeof(Signal)
    assert(typeofSignal == "table" and Signal.ClassName == "Signal", "bad argument #1 to 'new' (Signal expected, got " .. typeofSignal .. ")")

    -- // Check callback
    local typeofCallback = typeof(Callback)
    assert(typeofCallback == "function", "bad argument #2 for 'new' (function expected, got " .. typeofCallback .. ")")

    -- // Create
    local self = setmetatable({}, Connection)

    -- // Set properties
    self.Function = Callback
    self.State = true
    self.Signal = Signal

    -- // Return new class
    return self
end

-- // Enable a conneciton
function Connection.Enable(self: table): nil
    self.State = true
end

-- // Disable a connection
function Connection.Disable(self: table): nil
    self.State = false
end

-- // Disconnect a connection
function Connection.Disconnect(self: table): nil
    -- // Vars
    local Connections = self.Signal.Connections
    local selfInTable = table.find(Connections, self)

    -- // Remove
    table.remove(Connections, selfInTable)
end
Connection.disconnect = Connection.Disconnect

-- // Signal Constructor
function Signal.new(Name: string): table
    -- // Check Name
    local typeofName = typeof(Name)
    assert(typeofName == "string", "bad argument #1 for 'new' (string expected, got " .. typeofName .. ")")

    -- // Create
    local self = setmetatable({}, Signal)

    -- // Set properties
    self.Name = Name
    self.Connections = {}

    -- // Return new class
    return self
end

-- // Connect to a signal
function Signal.Connect(self: table, Callback: any): table
    -- // Check callback
    local typeofCallback = typeof(Callback)
    assert(typeofCallback == "function", "bad argument #1 for 'Connect' (function expected, got " .. typeofCallback .. ")")

    -- // Create Connection Object
    local connection = Connection.new(self, Callback)

    -- // Add to connections
    table.insert(self.Connections, connection)

    -- // Return
    return connection
end
Signal.connect = Signal.Connect

-- // Disconnects all of the signals
function Signal.DisconnectAll(self: table)
    -- // Loop through each connection
    for i = #self.Connections, 1, -1 do
        -- // Disconnect
        self.Connections[i]:Disconnect()
    end
end

-- // Fire a signal
function Signal.Fire(self: table, ...): nil
    -- // Loop through connections
    for _, connection in ipairs(self.Connections) do
        -- // See whether it can be fired
        if not (connection.State) then
            continue
        end

        -- // Fire
        taskspawn(connection.Function, ...)
    end
end
Signal.fire = Signal.Fire

-- // Wait for a signal
function Signal.Wait(self: table, Timeout: number, Filter: FunctionalTest): any
    -- // Default value
    Timeout = Timeout or (1/0)
    Filter = Filter or function(...) return true end

    -- // Vars
    local Return = {}
    local Fired = false

    -- // Connect
    local connection = self:Connect(function(...)
        if (Filter(...)) then
            Return = {...}
            Fired = true
        end
    end)

    -- // Constant loop
    local Start = tick()
    while (true) do
        -- // Wait
        taskwait()

        -- // Set time elapsed
        local timeElapsed = tick() - Start

        -- // See if fired or timed out
        if not (Fired or timeElapsed > Timeout) then
            continue
        end

        -- // Break out of the loop
        break
    end

    -- // Disconnect
    connection:Disconnect()

    -- // Return
    return unpack(Return)
end
Signal.wait = Signal.Wait

-- // Destroy a signal
function Signal.Destroy(self: table): nil
    self = nil
end
Signal.destroy = Signal.destroy

-- //
return Signal
end

function Manager()
    -- // Dependencies
local SignalBuilder = Module()

-- // Manager Class
local Manager = {}
Manager.__index = Manager
do
    -- // Constructor
    function Manager.new()
        -- // Initialise class
        local self = setmetatable({}, Manager)

        -- // Initialise vars
        self.Signals = {}

        -- // Return class
        return self
    end

    -- // Find a signal
    function Manager.Get(self, SignalName)
        return self.Signals[SignalName]
    end

    -- // Add a signal
    function Manager.Add(self, Signal)
        -- // Create signal if string is passed
        if (typeof(Signal) == "string") then
            Signal = SignalBuilder.new(Signal)
        end

        -- // Add
        self.Signals[Signal.Name] = Signal
    end

    -- // Remove a signal
    function Manager.Remove(self, SignalName)
        -- // Remove
        self.Signals[SignalName] = nil
    end

    -- // Create a signal
    Manager.Create = Manager.Add

    -- // Fire a signal
    function Manager.Fire(self, SignalName, ...)
        -- // Get the signal
        local Signal = self:Get(SignalName)

        -- // Make sure signal exists
        assert(Signal, "signal does not exist")

        -- // Fire
        return Signal:Fire(...)
    end

    -- // Connect to a signal
    function Manager.Connect(self, SignalName, ...)
        -- // Get the signal
        local Signal = self:Get(SignalName)

        -- // Make sure signal exists
        assert(Signal, "signal does not exist")

        -- // Connect
        return Signal:Connect(...)
    end

    -- // Disconnects all of the signals
    function Manager.Disconnect(self, SignalName)
        -- // Disconnecting all of one signal
        if (SignalName) then
            -- // Get the signal
            local Signal = self:Get(SignalName)

            -- // Make sure signal exists
            assert(Signal, "signal does not exist")

            -- // Disconnect
            return Signal:DisconnectAll()
        end

        -- // Disconnecting every signal
        for _, Signal in pairs(self.Signals) do
            Signal:DisconnectAll()
        end
    end

    -- // Wait for a signal to fire
    function Manager.Wait(self, SignalName, Timeout, Filter)
        -- // Get the signal
        local Signal = self:Get(SignalName)

        -- // Make sure signal exists
        assert(Signal, "signal does not exist")

        -- // Connect
        return Signal:Wait(Timeout, Filter)
    end
end

-- // Return
return Manager
end

function Cheese()
    if getgenv().Aiming then return getgenv().Aiming end

-- // Dependencies
local SignalManager = Manager()

-- // Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local GuiService = game:GetService("GuiService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- // Vars
local Heartbeat = RunService.Heartbeat
local LocalPlayer = Players.LocalPlayer
local CurrentCamera = Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

-- // Optimisation Vars (ugly)
local Drawingnew = Drawing.new
local Color3fromRGB = Color3.fromRGB
local Vector2new = Vector2.new
local GetGuiInset = GuiService.GetGuiInset
local Randomnew = Random.new
local mathfloor = math.floor
local CharacterAdded = LocalPlayer.CharacterAdded
local CharacterAddedWait = CharacterAdded.Wait
local WorldToViewportPoint = CurrentCamera.WorldToViewportPoint
local RaycastParamsnew = RaycastParams.new
local EnumRaycastFilterTypeBlacklist = Enum.RaycastFilterType.Blacklist
local Raycast = Workspace.Raycast
local GetPlayers = Players.GetPlayers
local Instancenew = Instance.new
local IsDescendantOf = Instancenew("Part").IsDescendantOf
local FindFirstChildWhichIsA = Instancenew("Part").FindFirstChildWhichIsA
local FindFirstChild = Instancenew("Part").FindFirstChild
local tableremove = table.remove
local tableinsert = table.insert
local RenderStepped = RunService.RenderStepped
local RenderSteppedWait = RenderStepped.Wait
local GetMouseLocation = UserInputService.GetMouseLocation

-- // Silent Aim Vars
local Aiming = {
    Enabled = true,

    ShowFOV = getgenv().SilentAimShowFOV,
    FOV = getgenv().SilentAimFOVSize,
    FOVSides = 600,
    FOVColour = Color3fromRGB(255, 255, 255),
    Filled = false,
    Transparency = 0.5,
    VisibleCheck = getgenv().SilentVisibleCheck,

    HitChance = getgenv().SilentHitChance,

    Selected = nil,
    SelectedPart = nil,
    SelectedPosition = nil,
    SelectedPositionOnScreen = nil,

    TargetPart = {getgenv().SilentAimPart},

    Ignored = {
        Teams = {
            {
                Team = LocalPlayer.Team,
                TeamColor = LocalPlayer.TeamColor,
            },
        },
        Players = {
            LocalPlayer,
            247923650,

        }
    },

    RaycastIgnore = nil,
    Signals = SignalManager.new()
}
getgenv().Aiming = Aiming

-- // Create signals
do
    local SignalNames = {"TargetPlayerChanged", "TargetPartChanged", "TargetPartPositionChanged", "TargetPartPositionOnScreenChanged"}

    for _, SignalName in ipairs(SignalNames) do
        Aiming.Signals:Create(SignalName)
    end
end

-- // Create circle
local circle = Drawingnew("Circle")
circle.Transparency = 1
circle.Thickness = 1.5
circle.Color = Aiming.FOVColour
circle.Filled = false
Aiming.FOVCircle = circle

-- // Update
function Aiming.UpdateFOV()
    -- // Make sure the circle exists
    if not (circle) then
        return
    end

    -- // Set Circle Properties
    circle.Visible = Aiming.ShowFOV
    circle.Radius = (Aiming.FOV * 3)
    circle.Position = Vector2new(Mouse.X, Mouse.Y + GetGuiInset(GuiService).Y)
    circle.NumSides = Aiming.FOVSides
    circle.Color = Aiming.FOVColour
    circle.Filled = Aiming.Filled
    circle.Transparency = Aiming.Transparency

    -- // Return circle
    return circle
end

-- // Custom Functions
local CalcChance = function(percentage)
    -- // Floor the percentage
    percentage = mathfloor(percentage)

    -- // Get the chance
    local chance = mathfloor(Randomnew().NextNumber(Randomnew(), 0, 1) * 100) / 100

    -- // Return
    return chance <= percentage / 100
end

-- // Customisable Checking Functions: Is a part visible
function Aiming.IsPartVisible(Part, PartDescendant)
    -- // Vars
    local Character = LocalPlayer.Character or CharacterAddedWait(CharacterAdded)
    local Origin = CurrentCamera.CFrame.Position
    local _, OnScreen = WorldToViewportPoint(CurrentCamera, Part.Position)

    -- //
    if (OnScreen) then
        -- // Vars
        local raycastParams = RaycastParamsnew()
        raycastParams.FilterType = EnumRaycastFilterTypeBlacklist
        raycastParams.FilterDescendantsInstances = Aiming.RaycastIgnore or {Character, CurrentCamera}

        -- // Cast ray
        local Result = Raycast(Workspace, Origin, Part.Position - Origin, raycastParams)

        -- // Make sure we get a result
        if (Result) then
            -- // Vars
            local PartHit = Result.Instance
            local Visible = (not PartHit or IsDescendantOf(PartHit, PartDescendant))

            -- // Return
            return Visible
        end
    end

    -- // Return
    return false
end

-- // Ignore player
function Aiming.IgnorePlayer(Player)
    -- // Vars
    local Ignored = Aiming.Ignored
    local IgnoredPlayers = Ignored.Players

    -- // Find player in table
    for _, IgnoredPlayer in ipairs(IgnoredPlayers) do
        -- // Make sure player matches
        if (IgnoredPlayer == Player) then
            return false
        end
    end

    -- // Blacklist player
    tableinsert(IgnoredPlayers, Player)
    return true
end

-- // Unignore Player
function Aiming.UnIgnorePlayer(Player)
    -- // Vars
    local Ignored = Aiming.Ignored
    local IgnoredPlayers = Ignored.Players

    -- // Find player in table
    for i, IgnoredPlayer in ipairs(IgnoredPlayers) do
        -- // Make sure player matches
        if (IgnoredPlayer == Player) then
            -- // Remove from ignored
            tableremove(IgnoredPlayers, i)
            return true
        end
    end

    -- //
    return false
end

-- // Ignore team
function Aiming.IgnoreTeam(Team, TeamColor)
    -- // Vars
    local Ignored = Aiming.Ignored
    local IgnoredTeams = Ignored.Teams

    -- // Find team in table
    for _, IgnoredTeam in ipairs(IgnoredTeams) do
        -- // Make sure team matches
        if (IgnoredTeam.Team == Team and IgnoredTeam.TeamColor == TeamColor) then
            return false
        end
    end

    -- // Ignore team
    tableinsert(IgnoredTeams, {Team, TeamColor})
    return true
end

-- // Unignore team
function Aiming.UnIgnoreTeam(Team, TeamColor)
    -- // Vars
    local Ignored = Aiming.Ignored
    local IgnoredTeams = Ignored.Teams

    -- // Find team in table
    for i, IgnoredTeam in ipairs(IgnoredTeams) do
        -- // Make sure team matches
        if (IgnoredTeam.Team == Team and IgnoredTeam.TeamColor == TeamColor) then
            -- // Remove
            tableremove(IgnoredTeams, i)
            return true
        end
    end

    -- // Return
    return false
end

-- //  Toggle team check
function Aiming.TeamCheck(Toggle)
    if (Toggle) then
        return Aiming.IgnoreTeam(LocalPlayer.Team, LocalPlayer.TeamColor)
    end

    return Aiming.UnIgnoreTeam(LocalPlayer.Team, LocalPlayer.TeamColor)
end

-- // Check teams
function Aiming.IsIgnoredTeam(Player)
    -- // Vars
    local Ignored = Aiming.Ignored
    local IgnoredTeams = Ignored.Teams

    -- // Check if team is ignored
    for _, IgnoredTeam in ipairs(IgnoredTeams) do
        -- // Make sure team matches
        if (Player.Team == IgnoredTeam.Team and Player.TeamColor == IgnoredTeam.TeamColor) then
            return true
        end
    end

    -- // Return
    return false
end

-- // Check if player (and team) is ignored
function Aiming.IsIgnored(Player)
    -- // Vars
    local Ignored = Aiming.Ignored
    local IgnoredPlayers = Ignored.Players

    -- // Loop
    for _, IgnoredPlayer in ipairs(IgnoredPlayers) do
        -- // Check if Player Id
        if (typeof(IgnoredPlayer) == "number" and Player.UserId == IgnoredPlayer) then
            return true
        end

        -- // Normal Player Instance
        if (IgnoredPlayer == Player) then
            return true
        end
    end

    -- // Team check
    return Aiming.IsIgnoredTeam(Player)
end

-- // Get the Direction, Normal and Material
function Aiming.Raycast(Origin, Destination, UnitMultiplier)
    if (typeof(Origin) == "Vector3" and typeof(Destination) == "Vector3") then
        -- // Handling
        if (not UnitMultiplier) then UnitMultiplier = 1 end

        -- // Vars
        local Direction = (Destination - Origin).Unit * UnitMultiplier
        local Result = Raycast(Workspace, Origin, Direction)

        -- // Make sure we have a result
        if (Result) then
            local Normal = Result.Normal
            local Material = Result.Material

            return Direction, Normal, Material
        end
    end

    -- // Return
    return nil
end

-- // Get Character
function Aiming.Character(Player)
    return Player.Character
end

-- // Check Health
function Aiming.CheckHealth(Player)
    -- // Get Humanoid
    local Character = Aiming.Character(Player)
    local Humanoid = FindFirstChildWhichIsA(Character, "Humanoid")

    -- // Get Health
    local Health = (Humanoid and Humanoid.Health or 0)

    -- //
    return Health > 0
end

-- // Custom Check Function
function Aiming.CheckCustom(Player)
    return true
end

-- // Check if silent aim can used
function Aiming.Check()
    return (Aiming.Enabled == true and Aiming.Selected ~= LocalPlayer and Aiming.SelectedPart ~= nil)
end
Aiming.checkSilentAim = Aiming.Check

-- // Get Closest Target Part
function Aiming.GetClosestTargetPartToCursor(Character)
    local TargetParts = Aiming.TargetPart

    -- // Vars
    local ClosestPart = nil
    local ClosestPartPosition = nil
    local ClosestPartOnScreen = false
    local ClosestPartMagnitudeFromMouse = nil
    local ShortestDistance = 1/0

    -- //
    local function CheckTargetPart(TargetPart)
        -- // Convert string -> Instance
        if (typeof(TargetPart) == "string") then
            TargetPart = FindFirstChild(Character, TargetPart)
        end

        -- // Make sure we have a target
        if not (TargetPart) then
            return
        end

        -- // Get the length between Mouse and Target Part (on screen)
        local PartPos, onScreen = WorldToViewportPoint(CurrentCamera, TargetPart.Position)
        local GuiInset = GetGuiInset(GuiService)
        local Magnitude = (Vector2new(PartPos.X, PartPos.Y - GuiInset.Y) - Vector2new(Mouse.X, Mouse.Y)).Magnitude

        -- //
        if (Magnitude < ShortestDistance) then
            ClosestPart = TargetPart
            ClosestPartPosition = PartPos
            ClosestPartOnScreen = onScreen
            ClosestPartMagnitudeFromMouse = Magnitude
            ShortestDistance = Magnitude
        end
    end

    -- // String check
    if (typeof(TargetParts) == "string") then
        -- // Check if it all
        if (TargetParts == "All") then
            -- // Loop through character children
            for _, v in ipairs(Character:GetChildren()) do
                -- // See if it a part
                if not (v:IsA("BasePart")) then
                    continue
                end

                -- // Check it
                CheckTargetPart(v)
            end
        else
            -- // Individual
            CheckTargetPart(TargetParts)
        end
    end

    -- //
    if (typeof(TargetParts) == "table") then
        -- // Loop through all target parts and check them
        for _, TargetPartName in ipairs(TargetParts) do
            CheckTargetPart(TargetPartName)
        end
    end

    -- //
    return ClosestPart, ClosestPartPosition, ClosestPartOnScreen, ClosestPartMagnitudeFromMouse
end

-- // Silent Aim Function
function Aiming.GetClosestPlayerToCursor()
    -- // Vars
    local TargetPart = nil
    local ClosestPlayer = nil
    local PartPosition = nil
    local PartPositionOnScreen = nil
    local Chance = CalcChance(Aiming.HitChance)
    local ShortestDistance = 1/0

    -- // Chance
    if (not Chance) then
        Aiming.Selected = LocalPlayer
        Aiming.SelectedPart = nil
        Aiming.SelectedPosition = nil
        Aiming.SelectedPositionOnScreen = nil

        return LocalPlayer
    end

    -- // Loop through all players
    for _, Player in ipairs(GetPlayers(Players)) do
        -- // Get Character
        local Character = Aiming.Character(Player)

        -- // Make sure isn't ignored and Character exists
        if (Aiming.IsIgnored(Player) == false and Character) then
            -- // Vars
            local TargetPartTemp, PartPositionTemp, PartPositionOnScreenTemp, Magnitude = Aiming.GetClosestTargetPartToCursor(Character)

            -- // Check if part exists, health and custom
            if (TargetPartTemp and Aiming.CheckHealth(Player) and Aiming.CheckCustom(Player)) then
                -- // Check if is in FOV
                if (circle.Radius > Magnitude and Magnitude < ShortestDistance) then
                    -- // Check if Visible
                    if (Aiming.VisibleCheck and not Aiming.IsPartVisible(TargetPartTemp, Character)) then continue end

                    -- // Set vars
                    ClosestPlayer = Player
                    ShortestDistance = Magnitude
                    TargetPart = TargetPartTemp
                    PartPosition = PartPositionTemp
                    PartPositionOnScreen = PartPositionOnScreenTemp
                end
            end
        end
    end

    -- // Firing changed signals
    if (Aiming.Selected ~= ClosestPlayer) then
        Aiming.Signals:Fire("TargetPlayerChanged", ClosestPlayer)
    end
    if (Aiming.SelectedPart ~= TargetPart) then
        Aiming.Signals:Fire("TargetPartChanged", TargetPart)
    end
    if (Aiming.SelectedPosition ~= PartPosition) then
        Aiming.Signals:Fire("TargetPartPositionChanged", PartPosition)
    end
    if (Aiming.SelectedPositionOnScreen ~= PartPositionOnScreen) then
        Aiming.Signals:Fire("TargetPartPositionOnScreenChanged", PartPositionOnScreen)
    end

    -- // End
    Aiming.Selected = ClosestPlayer
    Aiming.SelectedPart = TargetPart
    Aiming.SelectedPosition = PartPosition
    Aiming.SelectedPositionOnScreen = PartPositionOnScreen
end

-- // Beizer Aim Curves
Aiming.BeizerCurve = {}
do
    -- // Vars
    local AimingBeizerCurve = Aiming.BeizerCurve

    -- // Functions
    function Aiming.BeizerCurve.Cubic(t, StartPoint, EndPoint, ControlPointA, ControlPointB)
        local t1 = (1 - t)

        local A = t1^3 * StartPoint
        local B = 3 * t1^2 * t * ControlPointA
        local C = 3 * t1 * t^2 * ControlPointB
        local D = t^3 * EndPoint

        return A + B + C + D
    end
    local function DoControlPoint(StartPoint, EndPoint, ControlPointA, ControlPointB)
        -- //
        local Change = (EndPoint - StartPoint)

        -- // Calculate the control points - relative to the start and end points
        local A = StartPoint + (Change * ControlPointA)
        local B = StartPoint + (Change * ControlPointB)

        -- //
        return A, B
    end

    -- // Vars
    local t = 0
    local tThreshold = 0.99995
    local StartPoint = Vector2new()
    local EndPoint = Vector2new()
    local CurvePoints = {
        Vector2.new(0.83, 0),
        Vector2.new(0.17, 1)
    }
    local IsActive = false
    local Smoothness = 0.0025
    local DrawPath = false

    -- // AimTo with Beizer Curves
    function Aiming.BeizerCurve.AimTo(Data)
        -- // Vars
        local MousePosition = GetMouseLocation(UserInputService)
        StartPoint = MousePosition
        EndPoint = Data.TargetPosition
        Smoothness = Data.Smoothness or Smoothness
        CurvePoints = Data.CurvePoints or CurvePoints
        DrawPath = Data.DrawPath or DrawPath

        -- // Set Active
        t = 0
        IsActive = true
    end

    -- //
    RunService:BindToRenderStep("AimLockBeizer", 0, function()
        -- // Make sure is active
        if (not IsActive) then
            return
        end

        -- // Vars
        local BeizerCurve = AimingBeizerCurve.Cubic

        -- // I have to do it this way because a for loop stops before hand
        while (t <= 1 and IsActive) do RenderSteppedWait(RenderStepped)
            -- // Increment
            t = t + Smoothness

            -- // If past threshold, then do regular smoothing
            if (t >= tThreshold) then
                -- // Regular smoothing
                local clampedT = math.clamp(t, 0, 1)
                local New = StartPoint:Lerp(EndPoint, clampedT)

                -- // Move mouse
                mousemoveabs(New.X, New.Y)
            else
                -- // Work out X, Y based upon the curve
                local A, B = DoControlPoint(StartPoint, EndPoint, unpack(CurvePoints))
                local CurvePosition = BeizerCurve(t, StartPoint, EndPoint, A, B)

                -- // Create Circle [Debugging]
                if (DrawPath) then
                    local Path = Drawingnew("Circle")
                    Path.Radius = 2
                    Path.Color = Color3fromRGB(255, 150, 150)
                    Path.Visible = true
                    Path.Position = CurvePosition
                    task.delay(1, function()
                        Path:Remove()
                    end)

                    local ControlPointA = Drawingnew("Circle")
                    ControlPointA.Radius = 5
                    ControlPointA.Color = Color3fromRGB(225, 150, 255)
                    ControlPointA.Visible = true
                    ControlPointA.Position = A
                    task.delay(1, function()
                        ControlPointA:Remove()
                    end)

                    local ControlPointB = Drawingnew("Circle")
                    ControlPointB.Radius = 5
                    ControlPointB.Color = Color3fromRGB(225, 150, 255)
                    ControlPointB.Visible = true
                    ControlPointB.Position = B
                    task.delay(1, function()
                        ControlPointB:Remove()
                    end)
                end

                -- // Move mouse
                mousemoveabs(CurvePosition.X, CurvePosition.Y)
            end
        end

        -- // Reset
        IsActive = false
    end)
end

-- // Heartbeat Function
Heartbeat:Connect(function()
    Aiming.UpdateFOV()
    Aiming.GetClosestPlayerToCursor()
end)

-- //
return Aiming

-- // If you want the examples, look at the docs.
end

















local Aiming = Cheese()
Aiming.TeamCheck(false)

local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local CurrentCamera = Workspace.CurrentCamera

local DaHoodSettings = {
    SilentAim = getgenv().SilentAim,
    AimLock = false,
    Prediction = getgenv().SilentPrediction,
    AimLockKeybind = Enum.KeyCode.E
}
getgenv().DaHoodSettings = DaHoodSettings

function Aiming.Check()
    if not (Aiming.Enabled == true and Aiming.Selected ~= LocalPlayer and Aiming.SelectedPart ~= nil) then
        return false
    end

    local Character = Aiming.Character(Aiming.Selected)
    local KOd = Character:WaitForChild("BodyEffects")["K.O"].Value
    local Grabbed = Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil

    if (KOd or Grabbed) then
        return false
    end

    return true
end

local __index
__index = hookmetamethod(game, "__index", function(t, k)
    if (t:IsA("Mouse") and (k == "Hit" or k == "Target") and Aiming.Check()) then
        local SelectedPart = Aiming.SelectedPart

        if (DaHoodSettings.SilentAim and (k == "Hit" or k == "Target")) then
            local Hit = SelectedPart.CFrame + (SelectedPart.Velocity * DaHoodSettings.Prediction)

            return (k == "Hit" and Hit or SelectedPart)
        end
    end

    return __index(t, k)
end)

RunService:BindToRenderStep("AimLock", 0, function()
    if (DaHoodSettings.AimLock and Aiming.Check() and UserInputService:IsKeyDown(DaHoodSettings.AimLockKeybind)) then
        local SelectedPart = Aiming.SelectedPart

        local Hit = SelectedPart.CFrame + (SelectedPart.Velocity * DaHoodSettings.Prediction)

        CurrentCamera.CFrame = CFrame.lookAt(CurrentCamera.CFrame.Position, Hit.Position)
    end
    end)

























-- service
local Players = game:GetService("Players")	
local RS = game:GetService("RunService")	
local WS = game:GetService("Workspace")	
local GS = game:GetService("GuiService")	
local lol = game:GetService("StarterGui")

-- variable nor
local LP = Players.LocalPlayer	
local Mouse = LP:GetMouse()	
local Camera = WS.CurrentCamera	
local GetGuiInset = GS.GetGuiInset	
 
local AimlockState = true	
local Locked	
local Victim	
 
local SelectedKey = getgenv().Key


-- noft func
function notify(tx)
    lol:SetCore("SendNotification", {
        Title = "⚡ Zeus Private Lock ⚡",
        Text = tx,
        Duration = 5
    })
end
-- if is loaded
 
if getgenv().Loaded == true then	
    Notify("Your Already Loaded")	
    return	
end	
 
getgenv().Loaded = true

-- rpo
local fov = Drawing.new("Circle")	
fov.Filled = false	
fov.Transparency = 1	
fov.Thickness = 1	
fov.Color = Color3.fromRGB(255, 255, 0)	
fov.NumSides = 1000	

--functiosn
function update()	
    if getgenv().FOV == true then	
        if fov then	
fov.Radius = getgenv().FOVSize * 2	
            fov.Visible = getgenv().ShowFOV	
fov.Position = Vector2.new(Mouse.X, Mouse.Y + GetGuiInset(GS).Y)	
 
            return fov	
        end	
    end	
end	
 
function WTVP(arg)	
    return Camera:WorldToViewportPoint(arg)	
end	
 
function WTSP(arg)	
    return Camera.WorldToScreenPoint(Camera, arg)	
end	
 
function getClosest()	
    local closestPlayer	
    local shortestDistance = math.huge	
 
    for i, v in pairs(game.Players:GetPlayers()) do	
        local notKO = v.Character:WaitForChild("BodyEffects")["K.O"].Value ~= true	
        local notGrabbed = v.Character:FindFirstChild("GRABBING_COINSTRAINT") == nil	
 
if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild(getgenv().AimPart) and notKO and notGrabbed then	
            local pos = Camera:WorldToViewportPoint(v.Character.PrimaryPart.Position)	
local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).magnitude	
 
            if (getgenv().FOV) then	
                if (fov.Radius > magnitude and magnitude < shortestDistance) then	
                    closestPlayer = v	
                    shortestDistance = magnitude	
                end	
            else	
                if (magnitude < shortestDistance) then	
                    closestPlayer = v	
                    shortestDistance = magnitude	
                end	
            end	
        end	
    end	
    return closestPlayer	
end	

-- if k is dfown
Mouse.KeyDown:Connect(function(k)	
    SelectedKey = SelectedKey:lower()
    if k == SelectedKey then	
        if AimlockState == true then	
            Locked = not Locked	
            if Locked then	
                Victim = getClosest()	
 
                Notify("Locked onto: "..tostring(Victim.Character.Humanoid.DisplayName))	
            else	
                if Victim ~= nil then	
                    Victim = nil	
 
                    Notify("Unlocked")	
                end	
            end	
        else	
            Notify("Aimlock is not enabled")	
        end	
    end	
end)
-- split
RS.RenderStepped:Connect(function()	
    update()	
    if AimlockState == true then	
        if Victim ~= nil then	
            Camera.CFrame = CFrame.new(Camera.CFrame.p, Victim.Character[getgenv().AimPart].Position + Victim.Character[getgenv().AimPart].Velocity*getgenv().Prediction)	
        end	
    end	
end)	
	while wait() do
        if getgenv().AutoPrediction == true then	
        local pingvalue = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()	
        local split = string.split(pingvalue,'(')	
local ping = tonumber(split[1])	
if ping < 225 then	
getgenv().Prediction = 1.4	
elseif ping < 215 then	
getgenv().Prediction = 1.2	
	elseif ping < 205 then
getgenv().Prediction = 1.0	
	elseif ping < 190 then
getgenv().Prediction = 0.10	
elseif ping < 180 then	
getgenv().Prediction = 0.12	
	elseif ping < 170 then
getgenv().Prediction = 0.15	
	elseif ping < 160 then
getgenv().Prediction = 0.18	
	elseif ping < 150 then
getgenv().Prediction = 0.110	
elseif ping < 140 then	
getgenv().Prediction = 0.113	
elseif ping < 130 then	
getgenv().Prediction = 0.116	
elseif ping < 120 then	
getgenv().Prediction = 0.120	
elseif ping < 110 then	
getgenv().Prediction = 0.124	
elseif ping < 105 then	
getgenv().Prediction = 0.127	
elseif ping < 90 then	
getgenv().Prediction = 0.130	
elseif ping < 80 then	
getgenv().Prediction = 0.133	
elseif ping < 70 then	
getgenv().Prediction = 0.136	
elseif ping < 60 then	
getgenv().Prediction = 0.140	
elseif ping < 50 then	
getgenv().Prediction = 0.143	
elseif ping < 40 then	
getgenv().Prediction = 0.145	
elseif ping < 30 then	
getgenv().Prediction = 0.155	
elseif ping < 20 then	
getgenv().Prediction = 0.157	
        end	
        end	
	end

    if getgenv().PredictMovement == true then
    if getgenv().Smoothness == true then
        --aim part to modify
        local Main = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position + AimlockTarget.Character[getgenv().AimPart].Velocity/PredictionVelocity)
        
       -- making sh out
        Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().SmoothnessAmount, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut)
    else
        Camera.CFrame = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position + AimlockTarget.Character[getgenv().AimPart].Velocity/PredictionVelocity)
    end
elseif getgenv().PredictMovement == false then 
    if getgenv().Smoothness == true then
        --aim part modification
        local lerp = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position)

       
        Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().SmoothnessAmount, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut)
    else
        Camera.CFrame = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position)

end
end
